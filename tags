!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Scheme	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Scheme	s,set	/sets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Scheme	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/davidshe/scheme/scheme/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
a_plus_abs_b	./test.scm	/^	 a_plus_abs_b a b$/;"	f
accumulate	./test.scm	/^(define (accumulate combiner null-value term a next b)$/;"	f
accumulate-iter	./test.scm	/^(define (accumulate-iter combiner null-value term a next b)$/;"	f
average	./test.scm	/^(define (average x y)$/;"	f
cbrt	./test.scm	/^(define (cbrt x) ($/;"	f
cbrt-iter	./test.scm	/^(define (cbrt-iter guess x) ($/;"	f
cc	./test.scm	/^(define (cc amount kinds-of-coins)$/;"	f
close-enough?	./test.scm	/^(define (close-enough? x y) (< (abs (- x y)) 0.001))$/;"	f
cont-frac	./test.scm	/^(define (cont-frac N D k)$/;"	f
count-change	./test.scm	/^(define (count-change amount)$/;"	f
cube	./test.scm	/^(define (cube x) ($/;"	f
display-info	./test.scm	/^(define (display-info guess step)$/;"	f
divides?	./test.scm	/^(define (divides? a b) (= (remainder b a) 0))$/;"	f
double	./test.scm	/^(define (double x)$/;"	f
expmod	./test.scm	/^(define (expmod base exp m)$/;"	f
expt	./test.scm	/^(define (expt b n)$/;"	f
expt-iter	./test.scm	/^(define (expt-iter b counter product)$/;"	f
factorial	./test.scm	/^(define (factorial n)$/;"	f
factorial-acc	./test.scm	/^(define (factorial-acc n)$/;"	f
fast-expt	./test.scm	/^(define (fast-expt b n)$/;"	f
fast-fib	./test.scm	/^(define (fast-fib n)$/;"	f
fast-multp	./test.scm	/^(define (fast-multp a b)$/;"	f
fast-multp-iter	./test.scm	/^(define (fast-multp-iter a counter product)$/;"	f
fast-prime?	./test.scm	/^(define (fast-prime? n times)$/;"	f
fermat-test	./test.scm	/^(define (fermat-test n)$/;"	f
fib	./test.scm	/^(define (fib n) ($/;"	f
fib-iter	./test.scm	/^(define (fib-iter a b p q count)$/;"	f
filtered-accumulate	./test.scm	/^(define (filtered-accumulate combiner null-value term a next b filter)$/;"	f
find-divisor	./test.scm	/^(define (find-divisor n test-divisor)$/;"	f
first-denomination	./test.scm	/^(define (first-denomination kinds-of-coins)$/;"	f
fixed-point	./test.scm	/^(define (fixed-point f first-guess)$/;"	f
gcd	./test.scm	/^(define (gcd a b)$/;"	f
good-enough-cube?	./test.scm	/^(define (good-enough-cube? guess x) ($/;"	f
good-enough?	./test.scm	/^(define (good-enough? guess x)($/;"	f
half-interval-method	./test.scm	/^(define (half-interval-method f a b)$/;"	f
halve	./test.scm	/^(define (halve x)$/;"	f
identity	./test.scm	/^(define (identity x) x)$/;"	f
improve	./test.scm	/^(define (improve guess x)$/;"	f
improve_cb	./test.scm	/^(define (improve_cb guess x) ($/;"	f
inc	./test.scm	/^(define (inc n) (+ n 1))$/;"	f
multp	./test.scm	/^(define (multp a b)$/;"	f
multp-iter	./test.scm	/^(define (multp-iter a counter product)$/;"	f
next	./test.scm	/^(define (next i) $/;"	f
next-odd	./test.scm	/^(define (next-odd n)$/;"	f
pi-prod	./test.scm	/^(define (pi-prod n)$/;"	f
pi-sum	./test.scm	/^(define (pi-sum a b)$/;"	f
prime?	./test.scm	/^(define (prime? n)$/;"	f
product	./test.scm	/^(define (product term a next b)$/;"	f
product-iter	./test.scm	/^(define (product-iter term a next b)$/;"	f
product-itself-acc-gcd	./test.scm	/^(define (product-itself-acc-gcd a b)$/;"	f
report-prime	./test.scm	/^(define (report-prime elapsed-time)$/;"	f
return_bigger_two_sum_square	./test.scm	/^(define (return_bigger_two_sum_square x y z) ($/;"	f
search	./test.scm	/^(define (search f neg-point pos-point)$/;"	f
search-for-primes	./test.scm	/^(define (search-for-primes m count)$/;"	f
simpson	./test.scm	/^(define (simpson f a b n)$/;"	f
smallest-divisor	./test.scm	/^(define (smallest-divisor n) (find-divisor n 2))$/;"	f
sqrt	./test.scm	/^(define (sqrt x) ($/;"	f
sqrt	./test.scm	/^(define (sqrt x)$/;"	f
sqrt-iter	./test.scm	/^(define (sqrt-iter guess x)$/;"	f
square	./test.scm	/^(define (square x) (* x x))$/;"	f
square_sum	./test.scm	/^(define (square_sum x y) (+ (square x) (square y)))$/;"	f
start-prime-test	./test.scm	/^(define (start-prime-test n start-time)$/;"	f
sum	./test.scm	/^(define (sum term a next b)$/;"	f
sum-cubes	./test.scm	/^(define (sum-cubes a b)$/;"	f
sum-cubes-acc	./test.scm	/^(define (sum-cubes-acc a b)$/;"	f
sum-cubes-acc-prime	./test.scm	/^(define (sum-cubes-acc-prime a b)$/;"	f
sum-integers	./test.scm	/^(define (sum-integers a b)$/;"	f
sum-iter	./test.scm	/^(define (sum-iter term a next b)$/;"	f
timed-prime-test	./test.scm	/^(define (timed-prime-test n)$/;"	f
tolerance	./test.scm	/^(define tolerance 0.00001)$/;"	f
xroot	./test.scm	/^(define (xroot x)$/;"	f
